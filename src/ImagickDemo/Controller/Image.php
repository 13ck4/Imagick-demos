<?php

namespace ImagickDemo\Controller;

use Intahwebz\Request;
use ImagickDemo\Response\FileResponse;
use ImagickDemo\Response\JsonResponse;
use ImagickDemo\Response\RedirectResponse;
use ImagickDemo\Config\Application as ApplicationConfig;
use ImagickDemo\Queue\TaskQueueFactory;



/**
 * Class Image
 * @package ImagickDemo\Controller
 */
class Image {

    /**
     * @param $category
     * @param $example
     * @param \ImagickDemo\Control $control
     * @param array $customImageParams
     * @return JsonResponse
     */
    function getImageJobStatus(
        $category,
        $example,
        \ImagickDemo\Control $control,
        \ImagickDemo\Example $exampleController
    ) {

        $customImageParams = $exampleController->getCustomImageParams();

        $filename = getImageCacheFilename($category, $example, $control->getFullParams($customImageParams));
        $data = ['finished' => false];
        $data['params'] = $customImageParams;
        //$data['filename'] = $filename;

        foreach (getKnownExtensions() as $extension) {
            if (file_exists($filename.'.'.$extension) == true) {
                $data['finished'] = true;
                break;
            }
        }

        return new JsonResponse($data);
    }


    /**
     * @param \Auryn\Provider $injector
     * @param $params
     * @return mixed
     * @throws \Exception
     */
    private function getImageResponseInternal(\Auryn\Provider $injector, $params) {

        //TODO disable caching here.
        // if($cachings == false) {
        //return null;
        //}

        $cacheImageFile = function ($imageFunction, 
                                    $category,
                                    $example,
                                    \Auryn\Provider $injector) use ($params) {
            $filename = getImageCacheFilename($category, $example, $params);
            $lowried = [];
            foreach($params as $key => $value) {
                $lowried[':'.$key] = $value;
            }

            return renderImageAsFileResponse($imageFunction, $filename, $injector, $lowried);
        };

        $getCachedImageResponse = function($category, $example) use ($params) {
            return getCachedImageResponse($category, $example, $params);
        };
        
        $processImageTask = function (Request $request,
                                      $imageFunction,
                                      TaskQueueFactory $taskQueueFactory,
                                      $category, $example) use ($params) {

            return processImageTask(
                $request,
                $imageFunction,
                $params,
                $taskQueueFactory,
                $category,
                $example
            );
        };
        

        $callables = [
            'checkGetOriginalImage',
            $getCachedImageResponse, //This also reads the image when generated by a task
            $processImageTask,
            $cacheImageFile,
            'directImageFunction'
        ];

        foreach ($callables as $callable) {
            $result = $injector->execute($callable);
            if ($result) {
                return $result;
            }
        }

        throw new \Exception("Failed to process image request.");
    }

    /**
     * @param \Auryn\Provider $injector
     */
    function getCustomImageResponse(
        \Auryn\Provider $injector,
        $customImageFunction,
        \ImagickDemo\Example $exampleController,
        \ImagickDemo\Control $control
    ) {
        $injector->defineParam('imageFunction', $customImageFunction);
        $params = $control->getFullParams($exampleController->getCustomImageParams());

        return $this->getImageResponseInternal($injector, $params);
    }

    /**
     * @param Request $request
     * @param \Auryn\Provider $injector
     * @return array|callable
     */
    function getImageResponse(\Auryn\Provider $injector, \ImagickDemo\Control $control) {
        $params = $control->getFullParams([]);

        return $this->getImageResponseInternal($injector, $params);
    }
}